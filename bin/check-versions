#! /usr/bin/env node
const { execSync } = require("child_process");
const semver = require("semver");
// const semverCompare = require("semver/functions/compare");
const chalk = require("chalk");
const fs = require("fs");
const CWD = process.cwd();
const { dependencies = {}, devDependencies = {}, engines = {} } = require(CWD +
  "/package.json");
const { printTable } = require("console-table-printer");

const { log } = console;

const nodeVersion = process.version;
const npmVersion = execSync("npm --version").toString().trim();

const brokenDeps = [];

if (engines.node && !semver.satisfies(nodeVersion, engines.node)) {
  brokenDeps.push({
    package: "node",
    expect: engines.node,
    current: nodeVersion,
  });
}

if (engines.npm && !semver.satisfies(npmVersion, engines.npm)) {
  brokenDeps.push({
    package: "npm",
    expect: engines.npm,
    current: npmVersion,
  });
}

const deps = [
  ...Object.entries(dependencies),
  ...Object.entries(devDependencies),
];

for (let [package, expect] of deps) {
  const packageFilePath = `${CWD}/node_modules/${package}/package.json`;
  if (!fs.existsSync(packageFilePath)) {
    brokenDeps.push({ package, expect, current: chalk.gray("null") });
    continue;
  }
  const { version } = require(packageFilePath);
  try {
    const isSat = semver.satisfies(version, expect);
    if (!isSat) {
      let text = version;
      const versionObj = semver.parse(version);
      const expectObj = semver.minVersion(expect);
      // console.log(package, expectObj, versionObj);
      if (versionObj.major !== expectObj.major) {
        text = chalk.red(version);
      } else if (versionObj.minor !== expectObj.minor) {
        text = chalk.yellow(version);
      } else {
        text = chalk.green(version);
      }
      brokenDeps.push({ package, expect, current: text });
    }
  } catch (error) {
    console.log(package, expect, version, chalk.red(error.message));
  }
}

if (brokenDeps.length > 0) {
  log(
    chalk.white.bgRed(" Error "),
    chalk.red("依赖版本存在不符项，请重新安装")
  );
  printTable(brokenDeps);

  process.exit(1);
}
